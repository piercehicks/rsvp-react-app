{"version":3,"sources":["components/GuestName.js","components/Guest.js","components/PendingGuest.js","components/GuestList.js","components/Counter.js","App.js","serviceWorker.js","index.js"],"names":["GuestName","props","isEditing","type","value","children","onChange","handleNameEdits","Guest","e","setName","target","name","checked","isConfirmed","handleConfirmation","onClick","handleToggleEditing","handleRemove","PendingGuest","className","GuestList","pendingGuest","guests","filter","guest","isFiltered","map","index","key","toggleConfirmationAt","toggleEditingAt","text","setNameAt","removeGuestAt","Counter","numberAttending","numberUnconfirmed","totalInvited","App","state","toggleGuestPropertyAt","property","indexToChange","setState","slice","getTotalInvited","length","toggleFilter","handleNameInput","newGuestSubmitHandler","preventDefault","getAttendingGuests","reduce","total","this","onSubmit","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c248fc6.chunk.js","sourcesContent":["import React from 'react';\n\nconst GuestName = props => {\n    if (props.isEditing) {\n        return (\n            <input \n                type=\"text\" \n                value={props.children}\n                onChange={props.handleNameEdits}\n                />\n        );\n    }\n\n    return (\n        <span>\n            {props.children}\n        </span>\n    );\n};\n\nexport default GuestName;","import React from 'react';\nimport GuestName from './GuestName';\n\nconst Guest = props => \n    <li>\n        <GuestName \n            isEditing={props.isEditing}\n            handleNameEdits={e => props.setName(e.target.value)}>\n            {props.name}\n            \n        </GuestName>\n            <label>\n                <input \n                    type=\"checkbox\" \n                    checked={props.isConfirmed}\n                    onChange={props.handleConfirmation}\n                    /> Confirmed\n            </label>\n        <button onClick={props.handleToggleEditing}>\n            {props.isEditing ? \"save\" : \"edit\"}\n        </button>\n        <button onClick={props.handleRemove}>remove</button>\n    </li>;\n\nexport default Guest;","import React from 'react';\n\nconst PendingGuest = props => {\n    if (props.name) {\n        return (\n            <li className=\"pending\">\n                <span> \n                    {props.name}   \n                </span>   \n            </li>\n        )\n    }\n    return null;\n};\n\nexport default PendingGuest;","import React from 'react';\nimport Guest from './Guest';\nimport PendingGuest from './PendingGuest';\n\nconst GuestList = props => \n    <ul>\n    <PendingGuest name={props.pendingGuest} />     \n    { props.guests\n    .filter(guest => !props.isFiltered || guest.isConfirmed)\n    .map((guest, index) => \n        <Guest \n            key={index}\n            name={guest.name}\n            isConfirmed={guest.isConfirmed}\n            isEditing={guest.isEditing}\n            handleConfirmation={() => props.toggleConfirmationAt(index)}\n            handleToggleEditing={() => props.toggleEditingAt(index)}\n            setName={text => props.setNameAt(text, index)}\n            handleRemove={() => props.removeGuestAt(index)}\n        />\n    )}\n    </ul>;\n\nexport default GuestList;\n","import React from 'react';\n\nconst Counter = props => \n    <table className=\"counter\">\n            <tbody>\n              <tr>\n                <td>Attending:</td>\n                <td>{props.numberAttending}</td>\n              </tr>\n              <tr>\n                <td>Unconfirmed:</td>\n                <td>{props.numberUnconfirmed}</td>\n              </tr>\n              <tr>\n                <td>Total:</td>\n                <td>{props.totalInvited}</td>\n              </tr>\n            </tbody>\n          </table>\n\n\nexport default Counter;","import React, { Component } from 'react';\nimport GuestList from './components/GuestList';\nimport Counter from './components/Counter';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    isFiltered: false,\n    pendingGuest: \"\",\n    guests: [\n      {\n        name: \"Treasure\",\n        isConfirmed: false,\n        isEditing: false\n      },\n      {\n        name: \"Nic\",\n        isConfirmed: true,\n        isEditing: false\n      },\n      {\n        name: \"Matt\",\n        isConfirmed: false,\n        isEditing: true\n      }\n    ]\n  }\n\n  toggleGuestPropertyAt = (property, indexToChange) => \n    this.setState({\n      guests: this.state.guests.map((guest, index) => {\n        if (index === indexToChange) {\n          return {\n            ...guest,\n            [property]: !guest[property]\n          };\n        }\n        return guest;\n      })\n    });\n\n    toggleConfirmationAt = index => \n      this.toggleGuestPropertyAt(\"isConfirmed\", index);\n\n      toggleEditingAt = index => \n      this.toggleGuestPropertyAt(\"isEditing\", index);\n\n      removeGuestAt = index =>\n        this.setState({\n          guests: [\n            ...this.state.guests.slice(0,index),\n            ...this.state.guests.slice(index + 1)\n          ]\n        })\n  \n      setNameAt = (name, indexToChange) => \n      this.setState({\n        guests: this.state.guests.map((guest, index) => {\n          if (index === indexToChange) {\n            return {\n              ...guest,\n              name\n            };\n          }\n          return guest;\n        })\n      });\n\n  getTotalInvited = () => this.state.guests.length;\n   \n  \n\n  toggleFilter = () =>\n      this.setState({ isFiltered: !this.state.isFiltered });\n\n    handleNameInput = e => \n      this.setState({ pendingGuest: e.target.value });\n\n    newGuestSubmitHandler = e => {\n      e.preventDefault();\n      this.setState({ \n        guests: [\n          {\n            name: this.state.pendingGuest,\n            isConfirmed: false,\n            isEditing: false\n          },\n            ...this.state.guests\n        ],\n        pendingGuest: ''\n       });\n    }\n\n    getAttendingGuests = () =>\n    this.state.guests.reduce(\n      (total, guest) => guest.isConfirmed ? total + 1 : total, \n      0);\n\n    \n  \n  render() {\n    const totalInvited = this.getTotalInvited();\n    const numberAttending = this.getAttendingGuests();\n    const numberUnconfirmed = totalInvited - numberAttending;\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>You In?</h1>\n          <p>A RSVP Booking App</p>\n          <form onSubmit={this.newGuestSubmitHandler}>\n              <input \n                type=\"text\" \n                onChange={this.handleNameInput}\n                value={this.state.pendingGuest} \n                placeholder=\"Invite Someone\" \n              />\n              <button type=\"submit\" name=\"submit\" value=\"submit\">Submit</button>\n          </form>\n        </header>\n        <div className=\"main\">\n          <div>\n            <h2>Invitees</h2>\n            <label>\n              <input \n                type=\"checkbox\" \n                onChange={this.toggleFilter}\n                checked={this.state.isFiltered}\n                /> Hide those who haven't responded\n            </label>\n          </div>\n          <Counter \n            totalInvited={totalInvited}\n            numberAttending={numberAttending}\n            numberUnconfirmed={numberUnconfirmed}\n            />\n          <GuestList\n            guests={this.state.guests} \n            toggleConfirmationAt={this.toggleConfirmationAt}\n            toggleEditingAt={this.toggleEditingAt}\n            setNameAt={this.setNameAt}\n            isFiltered={this.state.isFiltered}\n            removeGuestAt={this.removeGuestAt}\n            pendingGuest={this.state.pendingGuest}\n            />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}